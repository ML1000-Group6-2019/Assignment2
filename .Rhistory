x <- 5
x
clear
cls
install.packages(c("car", "ggplot2", "gvlma", "plyr", "reshape2"))
library(ggplot2)
library(reshape2)
library(plyr)
library(car)
install.packages(c("dplyr", "ggthemes", "mice", "randomForest"))
---
title: 'Exploring the Titanic Dataset'
author: 'Megan L. Risdal'
url: https://www.kaggle.com/mrisdal/exploring-survival-on-the-titanic#
date: '6 March 2016'
output:
html_document:
number_sections: true
toc: true
fig_width: 7
fig_height: 4.5
theme: readable
highlight: tango
---
library(readxl)
test <- read_excel("C:/Users/sarpr/Desktop/Machine Learning/Session2/R Classification/test.csv")
View(test)
library(readxl)
test <- read_excel("C:/Users/sarpr/Desktop/Machine Learning/Session2/R Classification/test.csv")
View(test)
install.packages(c("bestglm", "GGally", "ggfortify", "leaps", "repr", "stargazer", "tidyverse"))
install.packages(c("aod", "Hmisc", "ROCR"))
load("C:/Users/sarpr/Desktop/Machine Learning/Assignments/Iterations/Download from RStudio/project/.RData")
load("C:/Users/sarpr/Desktop/Machine Learning/Assignments/Iterations/Download from RStudio/project/Logic.RData")
View(mylogit)
shiny::runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/Previous Assignment/ML1000-1-master/shiny')
runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/Previous Assignment/ML1000-1-master/shiny')
shiny::runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp')
runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp')
load("C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp/gmlnet_fit.RData")
runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp')
shiny::runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp2')
runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp2')
runApp('C:/Users/sarpr/Desktop/Machine Learning/Assignments/1/Assignment1_2/ShinyApp2')
library(tidyverse)
# Sample Data
df = tibble(x = c(1,2,3), y = c(4,5,6), columnIndicator = c("x","x","y"))
df
df %>%
mutate(newValue = !!as.name(df$columnIndicator))
# NOT RUN {
# with data.frame
dict = data.frame(num=1:26, small=letters, cap=LETTERS, stringsAsFactors = FALSE)
rownames(dict) = paste0('rows', 1:26)
# NOT RUN {
# with data.frame
dict = data.frame(num=1:26, small=letters, cap=LETTERS, stringsAsFactors = FALSE)
dict
rownames(dict) = paste0('rows', 1:26)
dict
identical(vlookup_df(1:3, dict), dict[1:3,]) # should be TRUE
library(expss)
library(tidyverse)
identical(vlookup_df(1:3, dict), dict[1:3,]) # should be TRUE
vlookup(c(45,1:3,58), dict, result_column='cap')
vlookup_df(c('z','d','f'), dict, lookup_column = 'small')
setwd("C:/Users/sarpr/Desktop/Machine Learning/Assignments/Assignment2")
Data_indexed <- Data_joined
colnames(Data_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(Data_joined),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
Data_indexed <- Data_joined
#setwd("~/Documents/ML-UYork/ML1000/Asignement2")
#setwd ("c:/Users/sarpr/Desktop/Machine Learning/Assignments/Assignment2")
library(plyr)
library(dplyr)
library(tidyr)
#library(tidyverse)
library(knitr)    # For knitting document and include_graphics function
library(ggplot2)  # For plotting
library(mice)
# mydata <- read.csv(file.choose(), header = TRUE, na.strings = c("NA","","#NA"))
# Reading files
demographic   = read.csv("Data/Raw/demographic.csv", header = TRUE, na.strings = c("NA","","#NA"))
diet          = read.csv("Data/Raw/diet.csv", header = TRUE, na.strings = c("NA","","#NA"))
examination   = read.csv("Data/Raw/examination.csv", header = TRUE, na.strings = c("NA","","#NA"))
labs          = read.csv("Data/Raw/labs.csv", header = TRUE, na.strings = c("NA","","#NA"))
medications   = read.csv("Data/Raw/medications.csv", header = TRUE, na.strings = c("NA","","#NA"))
questionnaire = read.csv("Data/Raw/questionnaire.csv", header = TRUE, na.strings = c("NA","","#NA"))
Dictionary    = read.csv("Data/Raw/Dictionary.csv", header = TRUE, na.strings = c("NA","","#NA"))
# Merging & Combining files
data_List = list(demographic,examination,diet,labs,questionnaire,medications)
Data_joined = join_all(data_List) #require(plyr)
dir.create("Data/Raw_Joined")
#write.csv(Data_joined,file = "Data/Raw_Joined/Data_joined.csv")
head(data_List)
str(data_List)
Data_indexed <- Data_joined
#colnames(Data_indexed) <- with(Dictionary,
#                               Dictionary$Variable.Description[match(colnames(Data_joined),
#                                                                     Dictionary$Variable.Name,
#                                                                     nomatch = Dictionary$Variable.Name
#                               )])
colnames(Data_indexed) <- with(Dictionary,
Dictionary$Variable.Description[charmatch(as.character(colnames(Data_joined)),
as.character(Dictionary$Variable.Name),
nomatch = Dictionary$Variable.Name
)])
clean_index <- c(colnames(Data_indexed))
sum(is.na(clean_index))
colnames(Data_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(Data_joined),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
clean_index <- c(colnames(Data_indexed))
sum(is.na(clean_index))
################################### Data Exploration#########################################
####################################Demographics#############################################
demographic_indexed <- demographic
colnames(demographics_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(demographic),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
colnames(demographic_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(demographic),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
#Check the data for missing values.
attach(demographic_indexed)
str(demographic_indexed)
sapply(demographic_indexed, function(x) sum(is.na(x)))
sum(is.na(c(colnames(demographic_indexed))))
################################### Data Exploration#########################################
####################################Demographics#############################################
demographic_indexed <- demographic
colnames(demographic_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(demographic),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
sum(is.na(c(colnames(demographic_indexed))))
attach(demographic_indexed)
str(demographic_indexed)
sapply(demographic_indexed, function(x) sum(is.na(x)))
sapply(demographic_indexed, function(x) sum(is.na(x)))
head(demographic_indexed)
str(demographic_indexed)
summary(demographic_indexed)
nrow(demographic)
ncol(demographic)
summary(demographic)
str(demographic)
str(demographic_indexed)
View(Data_indexed)
nrow(demographic)
ncol(demographic)
summary(demographic)
str(demographic)
######################INDEXING DEMOGRAPHICS##################################
demographic_indexed <- demographic
colnames(demographic_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(demographic),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
sum(is.na(c(colnames(demographic_indexed))))
attach(demographic_indexed)
str(demographic_indexed)
sapply(demographic_indexed, function(x) sum(is.na(x)))
head(demographic_indexed)
summary(demographic_indexed)
histogram(demographic_indexed)
histogram(demographic_indexed$`Gender of the participant.`)
str(demographic_indexed)
install.packages("plotly")
demcols = sapply(demographic_indexed, is.numeric)
data_demcols = demographic_indexed[ , demcols]
View(data_demcols)
str(demcols)
melt_demo_indexed = melt(demcols, id.vars=c("Respondent sequence number"))
? melt
library(reshape2)
melt_demo_indexed = melt(demcols, id.vars=c("Respondent sequence number"))
head(melt_demo_indexed , 10)
View(data_demcols)
attach(demographic_indexed)
str(demographic_indexed)
head(demographic_indexed)
summary(demographic_indexed)
demcols = sapply(demographic_indexed, is.numeric)
data_demcols = demographic_indexed[ , demcols]
str(demcols)
melt_demo_indexed = melt(demcols, id.vars=c("Respondent sequence number"))
head(melt_demo_indexed , 10)
demcols = sapply(demographic_indexed, is.integer)
data_demcols = demographic_indexed[ , demcols]
View(data_demcols)
str(demcols)
melt_demo_indexed = melt(demcols, id.vars=c("Respondent sequence number"))
head(melt_demo_indexed , 10)
setwd("C:/Users/sarpr/Desktop/Machine Learning/Assignments/Assignment2")
#setwd("~/Documents/ML-UYork/ML1000/Asignement2")
#setwd ("c:/Users/sarpr/Desktop/Machine Learning/Assignments/Assignment2")
library(plyr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(knitr)    # For knitting document and include_graphics function
library(ggplot2)  # For plotting
library(mice)
library(reshape2)
#mydata <- read.csv(file.choose(), header = TRUE, na.strings = c("NA","","#NA"))
# Reading files
demographic   = read.csv("Data/Raw/demographic.csv", header = TRUE, na.strings = c("NA","","#NA"))
diet          = read.csv("Data/Raw/diet.csv", header = TRUE, na.strings = c("NA","","#NA"))
examination   = read.csv("Data/Raw/examination.csv", header = TRUE, na.strings = c("NA","","#NA"))
labs          = read.csv("Data/Raw/labs.csv", header = TRUE, na.strings = c("NA","","#NA"))
medications   = read.csv("Data/Raw/medications.csv", header = TRUE, na.strings = c("NA","","#NA"))
questionnaire = read.csv("Data/Raw/questionnaire.csv", header = TRUE, na.strings = c("NA","","#NA"))
Dictionary    = read.csv("Data/Raw/Dictionary.csv", header = TRUE, na.strings = c("NA","","#NA"))
# Merging files
data_List = list(demographic,examination,diet,labs,questionnaire,medications)
Data_joined = join_all(data_List) #require(plyr)
dir.create("Data/Raw_Joined")
Data_indexed <- Data_joined
Data_indexed <- Data_joined
colnames(Data_indexed) <- with(Dictionary,
Dictionary$Variable.Description[match(colnames(Data_joined),
Dictionary$Variable.Name,
nomatch = Dictionary$Variable.Name
)])
clean_index <- c(colnames(Data_indexed))
sum(is.na(clean_index))
str(Data_indexed)
library(plyr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(knitr)    # For knitting document and include_graphics function
library(ggplot2)  # For plotting
library(mice)
library(reshape2)
#mydata <- read.csv(file.choose(), header = TRUE, na.strings = c("NA","","#NA"))
# Reading files
demographic   = read.csv("Data/Raw/demographic.csv", header = TRUE, na.strings = c("NA","","#NA"))
diet          = read.csv("Data/Raw/diet.csv", header = TRUE, na.strings = c("NA","","#NA"))
examination   = read.csv("Data/Raw/examination.csv", header = TRUE, na.strings = c("NA","","#NA"))
labs          = read.csv("Data/Raw/labs.csv", header = TRUE, na.strings = c("NA","","#NA"))
medications   = read.csv("Data/Raw/medications.csv", header = TRUE, na.strings = c("NA","","#NA"))
questionnaire = read.csv("Data/Raw/questionnaire.csv", header = TRUE, na.strings = c("NA","","#NA"))
Dictionary    = read.csv("Data/Raw/Dictionary.csv", header = TRUE, na.strings = c("NA","","#NA"))
# Merging files
data_List = list(demographic,examination,diet,labs,questionnaire,medications)
Data_joined = join_all(data_List) #require(plyr)
nrow(demographic)
ncol(demographic)
summary(demographic)
str(demographic)
View(Dictionary)
nrow(diet)
ncol(diet)
summary(diet)
str(diet)
nrow(Data_joined)
ncol(Data_joined)
str(Data_joined)
str(Data_joined$LBXGH)
summary(Data_joined$LBXGH)
View(Dictionary)
str(Data_joined)
Data_joined = cbind(Data_joined, Diabetes = ifelse(
Data_joined$LBXGH >= 5.7,
"Yes", "No" ))
summary(Data_joined$Diabetes)
Data_joined = cbind(Data_joined, Target = ifelse(
Data_joined$Diabetes == "Yes",
1, 0 ))
summary(Data_joined$Diabetes)
summary(Data_joined$Target)
str(Data_joined$Target)
write.csv(Data_indexed,file = "Data/Raw_Joined/Data_indexed.csv")
dir.create("Data/Raw_Joined")
write.csv(Data_joined,file = "Data/Raw_Joined/Data_joined.csv")
nrow(questionnaire)
ncol(questionnaire)
summary(questionnaire)
str(questionnaire)
View(Dictionary)
str(Data_processed)
#write.csv(Data_joined,file = "Data/Raw_Joined/Data_joined.csv")
Data_processed<- Data_joined
str(Data_processed)
list_of_numcols = sapply(Data_processed, is.numeric)
numcols = Data_processed[ , list_of_numcols]
View(numcols)
str(data)
str(Data_processed)
View(numcols)
melt_data = melt(numcols, id.vars=c("SEQN"))
head(melt_data, 10)
ggplot(data = melt_data, mapping = aes(x = value)) + geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
